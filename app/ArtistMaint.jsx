import React from 'react';
import ReactDOM from 'react-dom';
import {Artist} from '../app/artist.js';
import {CardStackApp} from '../cardstack/CardStackApp.jsx';
import {Code} from '../app/code.js';
import {decades, genres} from '../app/codes.js';


class ArtistMaint extends React.Component {

  constructor(props) {
    super(props);

    // Init the database objects:
    this.artist = new Artist();
    this.code = new Code(decades, genres);
    
  }

  cardStackAppRender() {

      ReactDOM.render(
        <CardStackApp
          artists={this.artist.readArtists}
          decade={this.artist.decade}
          genre={this.artist.genre}
          parent={this}
        />,
        document.getElementById('app')
      );
    
  }

  cardStackAppRerender() {

    // Why am I unmounting and rendering rather than simply re-rendering the existing
    // component?  See document "architecture.txt".

    // NOTE: The first such unmounting/remounting generates the following error message:
    // "Warning: unmountComponentAtNode(): The node you're attempting to unmount was
    // rendered by another copy of React."

    // This is because the first rendering is generated by the start-up process while
    // subsequent ones are done through the component hierarchy.  As such, only the
    // first generates the error.
    ReactDOM.unmountComponentAtNode(document.getElementById('app'));
    this.cardStackAppRender();
    
  }

  render() {
    return (
      <CardStackApp
        artists={this.artist.readArtists}
        decade={this.artist.decade}
        genre={this.artist.genre}
        parent={this}
      />
    );
  }

}

export default ArtistMaint;